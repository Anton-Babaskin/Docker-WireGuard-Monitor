name: 🧪 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      
      - name: Run ShellCheck
        run: |
          shellcheck wg_telemon install.sh
          
      - name: Check bash syntax
        run: |
          bash -n wg_telemon
          bash -n install.sh
          
      - name: Validate systemd files
        run: |
          sudo apt-get install -y systemd
          systemd-analyze verify wg-telemon.service || true
          systemd-analyze verify wg-telemon.timer || true

  test:
    name: 🧪 Functional Tests  
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test environment
        run: |
          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y docker.io curl wireguard-tools
          
          # Start Docker
          sudo systemctl start docker
          
      - name: Create test WireGuard container
        run: |
          # Create a simple test container with WireGuard interface
          docker run -d --name test-wireguard --privileged \
            -v /lib/modules:/lib/modules:ro \
            linuxserver/wireguard:latest
          
          # Wait for container to start
          sleep 10
          
      - name: Test configuration validation
        run: |
          # Create test config
          sudo mkdir -p /etc
          cat > /tmp/test-config.env << EOF
          BOT_TOKEN="123456789:ABCdefGhIjKlmnoPQRsTUVwxyz"
          CHAT_ID="123456789"
          WG_CONTAINERS="test-wireguard"
          WG_IFACE="wg0"
          THRESHOLD=300
          EOF
          
          # Test config loading (dry run)
          WG_MONITOR_CONFIG=/tmp/test-config.env \
            bash -n wg_telemon
            
      - name: Test script execution (dry run)
        run: |
          # Test script without actually sending Telegram messages
          export WG_MONITOR_CONFIG=/tmp/test-config.env
          export LOG_LEVEL=DEBUG
          
          # This should validate everything except Telegram sending
          timeout 30s ./wg_telemon --help || true
          
      - name: Cleanup
        run: |
          docker stop test-wireguard || true
          docker rm test-wireguard || true

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run security checks
        run: |
          # Check for sensitive data patterns
          if grep -r "BOT_TOKEN.*[0-9]" --include="*.sh" --include="*.md" .; then
            echo "❌ Found hardcoded bot tokens"
            exit 1
          fi
          
          # Check file permissions in examples
          if grep -r "chmod 777\|chmod 666" --include="*.sh" --include="*.md" .; then
            echo "❌ Found insecure permissions"
            exit 1  
          fi
          
          echo "✅ Security checks passed"

  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check documentation completeness
        run: |
          # Check if all scripts are documented
          if ! grep -q "wg_telemon" README.md; then
            echo "❌ Main script not documented in README"
            exit 1
          fi
          
          if ! grep -q "install.sh" README.md; then
            echo "❌ Install script not documented in README"
            exit 1
          fi
          
          # Check for example configurations
          if [ ! -f "EXAMPLES.md" ]; then
            echo "❌ EXAMPLES.md is missing"
            exit 1
          fi
          
          echo "✅ Documentation checks passed"
          
      - name: Check links in documentation
        run: |
          # Simple link check for obvious broken links
          if grep -r "http://localhost\|127.0.0.1\|example.com" *.md; then
            echo "⚠️ Found placeholder URLs in documentation"
          fi

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: [lint, test, security, documentation]
    if: github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create release package
        run: |
          # Create release archive
          tar -czf wireguard-monitor-${{ github.event.release.tag_name }}.tar.gz \
            wg_telemon install.sh \
            wg-telemon.service wg-telemon.timer \
            telemon.env README.md EXAMPLES.md CHANGELOG.md
            
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./wireguard-monitor-${{ github.event.release.tag_name }}.tar.gz
          asset_name: wireguard-monitor-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip
