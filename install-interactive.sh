#!/usr/bin/env bash
set -euo pipefail

# WireGuard Monitor - Interactive Installer
# –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏

readonly SCRIPT_NAME="WireGuard Monitor Interactive Installer"
readonly SCRIPT_VERSION="2.0"
readonly REPO_URL="https://github.com/Anton-Babaskin/Docker-WireGuard-Monitor"

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m'

# –ü—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
readonly INSTALL_DIR="/opt/wg-monitor"
readonly CONFIG_FILE="/etc/telemon.env"
readonly SCRIPT_PATH="/usr/local/bin/wg_telemon.sh"
readonly SERVICE_FILE="/etc/systemd/system/wg-telemon.service"
readonly TIMER_FILE="/etc/systemd/system/wg-telemon.timer"
readonly LOG_FILE="/var/log/wg-monitor.log"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
declare BOT_TOKEN=""
declare CHAT_ID=""
declare WG_CONTAINERS=""
declare WG_IFACE="wg0"
declare THRESHOLD="300"
declare LOG_LEVEL="INFO"
declare ALERT_COOLDOWN="3600"
declare MAX_RETRIES="3"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_header() {
    clear
    echo -e "${BLUE}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üõ°Ô∏è  WireGuard Monitor Installer                          ‚ïë
‚ïë                          –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê                            ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  –≠—Ç–æ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤    ‚ïë
‚ïë  —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ Telegram. –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    echo -e "${CYAN}–í–µ—Ä—Å–∏—è: $SCRIPT_VERSION${NC}"
    echo
}

print_step() {
    echo -e "\n${PURPLE}üîÑ $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}" >&2
}

print_question() {
    echo -e "${WHITE}‚ùì $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
read_input() {
    local prompt="$1"
    local default="${2:-}"
    local secret="${3:-false}"
    local result=""
    
    if [[ "$secret" == "true" ]]; then
        echo -n -e "${WHITE}$prompt${NC}"
        read -s result
        echo
    else
        if [[ -n "$default" ]]; then
            echo -n -e "${WHITE}$prompt [$default]: ${NC}"
        else
            echo -n -e "${WHITE}$prompt: ${NC}"
        fi
        read -r result
    fi
    
    # –ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º default
    if [[ -z "$result" && -n "$default" ]]; then
        result="$default"
    fi
    
    echo "$result"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: ${YELLOW}sudo $0${NC}"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_system() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."
    
    local errors=0
    local warnings=0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
    if ! grep -qi linux /proc/version 2>/dev/null; then
        print_error "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Linux"
        ((errors++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥
    local required_commands=("curl" "docker" "systemctl")
    local missing_commands=()
    
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_commands+=("$cmd")
        fi
    done
    
    if [[ ${#missing_commands[@]} -gt 0 ]]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥—ã: ${missing_commands[*]}"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:"
        
        if command -v apt-get >/dev/null 2>&1; then
            echo "  sudo apt-get update && sudo apt-get install -y ${missing_commands[*]}"
        elif command -v yum >/dev/null 2>&1; then
            echo "  sudo yum install -y ${missing_commands[*]}"
        elif command -v dnf >/dev/null 2>&1; then
            echo "  sudo dnf install -y ${missing_commands[*]}"
        fi
        
        ((errors++))
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if command -v docker >/dev/null 2>&1; then
        if ! docker version >/dev/null 2>&1; then
            print_warning "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω"
            print_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo systemctl start docker"
            ((warnings++))
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Bash
    if [[ ${BASH_VERSION%%.*} -lt 4 ]]; then
        print_warning "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Bash 4.0+"
        ((warnings++))
    fi
    
    if [[ $errors -gt 0 ]]; then
        print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $errors –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
    
    if [[ $warnings -gt 0 ]]; then
        print_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ $warnings –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
        echo -n "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): "
        read -r response
        if [[ ! "$response" =~ ^[Yy] ]]; then
            exit 0
        fi
    fi
    
    print_success "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é Telegram –±–æ—Ç–∞
show_telegram_instructions() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞"
    
    cat << EOF
${CYAN}üì± –°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞:${NC}

1Ô∏è‚É£  –û—Ç–∫—Ä–æ–π—Ç–µ Telegram
2Ô∏è‚É£  –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ ${YELLOW}@BotFather${NC}
3Ô∏è‚É£  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: ${YELLOW}/start${NC}
4Ô∏è‚É£  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: ${YELLOW}/newbot${NC}
5Ô∏è‚É£  –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –±–æ—Ç–∞: ${GREEN}My WireGuard Monitor${NC}
6Ô∏è‚É£  –ü—Ä–∏–¥—É–º–∞–π—Ç–µ username: ${GREEN}my_wg_monitor_bot${NC}
7Ô∏è‚É£  –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω (—Ñ–æ—Ä–º–∞—Ç: ${GREEN}123456789:ABCdefGhIjKlmnoPQRsTUVwxyz${NC})

${CYAN}üìû –ü–æ–ª—É—á–µ–Ω–∏–µ Chat ID:${NC}

–°–ø–æ—Å–æ–± 1 (–¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π):
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ ${YELLOW}@userinfobot${NC}
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: ${YELLOW}/start${NC}
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID (—á–∏—Å–ª–æ —Ç–∏–ø–∞: ${GREEN}123456789${NC})

–°–ø–æ—Å–æ–± 2 (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤):
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
‚Ä¢ –î–∞–π—Ç–µ –µ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
‚Ä¢ Chat ID –≥—Ä—É–ø–ø—ã –±—É–¥–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (—Ç–∏–ø–∞: ${GREEN}-987654321${NC})

EOF

    echo -n "–ö–æ–≥–¥–∞ —Å–æ–∑–¥–∞–¥–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ Enter..."
    read -r
}

# –í–≤–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ Telegram –¥–∞–Ω–Ω—ã—Ö
configure_telegram() {
    show_telegram_instructions
    
    # –í–≤–æ–¥ Bot Token
    while true; do
        BOT_TOKEN=$(read_input "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞" "" "true")
        
        if [[ -z "$BOT_TOKEN" ]]; then
            print_error "–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            continue
        fi
        
        if [[ ! "$BOT_TOKEN" =~ ^[0-9]+:[A-Za-z0-9_-]{35}$ ]]; then
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 123456789:ABCdef..."
            echo "–í–∞—à —Ç–æ–∫–µ–Ω: ${BOT_TOKEN:0:20}..."
            continue
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Telegram API
        print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞..."
        local bot_info
        if bot_info=$(curl -s "https://api.telegram.org/bot$BOT_TOKEN/getMe" 2>/dev/null); then
            if echo "$bot_info" | grep -q '"ok":true'; then
                local bot_name=$(echo "$bot_info" | grep -o '"first_name":"[^"]*"' | cut -d'"' -f4)
                print_success "–¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç! –ë–æ—Ç: $bot_name"
                break
            else
                print_error "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω"
                continue
            fi
        else
            print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
            continue
        fi
    done
    
    # –í–≤–æ–¥ Chat ID
    while true; do
        CHAT_ID=$(read_input "–í–≤–µ–¥–∏—Ç–µ Chat ID")
        
        if [[ -z "$CHAT_ID" ]]; then
            print_error "Chat ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            continue
        fi
        
        if [[ ! "$CHAT_ID" =~ ^-?[0-9]+$ ]]; then
            print_error "Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 –∏–ª–∏ -987654321)"
            continue
        fi
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Chat ID..."
        local test_message="üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WireGuard Monitor
        
üñ•Ô∏è –•–æ—Å—Ç: $(hostname)
üïê –í—Ä–µ–º—è: $(date)
        
–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ‚úÖ"
        
        local response
        if response=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/sendMessage" \
            -d "chat_id=$CHAT_ID" \
            -d "text=$test_message" 2>/dev/null); then
            
            if echo "$response" | grep -q '"ok":true'; then
                print_success "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
                print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                break
            else
                print_error "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
                echo "–û—Ç–≤–µ—Ç API: $response"
                continue
            fi
        else
            print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Chat ID."
            continue
        fi
    done
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
detect_containers() {
    print_step "–ü–æ–∏—Å–∫ WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    local all_containers
    if ! all_containers=$(docker ps --format "{{.Names}}" 2>/dev/null); then
        print_error "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        print_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω: sudo systemctl start docker"
        exit 1
    fi
    
    if [[ -z "$all_containers" ]]; then
        print_warning "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        print_info "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é"
    else
        print_info "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        local i=1
        declare -a container_list=()
        
        while IFS= read -r container; do
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            local image
            image=$(docker inspect --format='{{.Config.Image}}' "$container" 2>/dev/null || echo "unknown")
            
            local is_wg=""
            if [[ "$container" =~ (wire|wg|vpn) ]] || [[ "$image" =~ (wire|wg) ]]; then
                is_wg=" ${GREEN}(–≤–æ–∑–º–æ–∂–Ω–æ WireGuard)${NC}"
            fi
            
            echo -e "  ${YELLOW}$i${NC}. $container - $image$is_wg"
            container_list+=("$container")
            ((i++))
        done <<< "$all_containers"
    fi
    
    echo
    print_question "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞?"
    echo "1. –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3)"
    echo "2. –í–≤–µ—Å—Ç–∏ –∏–º–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é"
    echo "3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    
    local choice
    choice=$(read_input "–í–∞—à –≤—ã–±–æ—Ä [3]" "3")
    
    case $choice in
        1)
            if [[ ${#container_list[@]} -eq 0 ]]; then
                print_error "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
                exit 1
            fi
            
            local selected_nums
            selected_nums=$(read_input "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
            
            local selected_containers=()
            IFS=',' read -ra nums <<< "$selected_nums"
            for num in "${nums[@]}"; do
                num=$(echo "$num" | tr -d ' ')
                if [[ "$num" =~ ^[0-9]+$ ]] && [[ $num -ge 1 ]] && [[ $num -le ${#container_list[@]} ]]; then
                    selected_containers+=("${container_list[$((num-1))]}")
                fi
            done
            
            if [[ ${#selected_containers[@]} -eq 0 ]]; then
                print_error "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
                exit 1
            fi
            
            WG_CONTAINERS="${selected_containers[*]}"
            ;;
            
        2)
            WG_CONTAINERS=$(read_input "–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª" "wireguard")
            ;;
            
        3)
            print_step "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
            local found_containers=()
            
            while IFS= read -r container; do
                local image
                image=$(docker inspect --format='{{.Config.Image}}' "$container" 2>/dev/null || echo "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∏ –æ–±—Ä–∞–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                if [[ "$container" =~ (wire|wg|vpn) ]] || [[ "$image" =~ (wire|wg) ]]; then
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ WireGuard –≤–Ω—É—Ç—Ä–∏
                    if docker exec "$container" which wg >/dev/null 2>&1 || \
                       docker exec "$container" ls /etc/wireguard >/dev/null 2>&1; then
                        found_containers+=("$container")
                        print_success "–ù–∞–π–¥–µ–Ω WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $container"
                    fi
                fi
            done <<< "$all_containers"
            
            if [[ ${#found_containers[@]} -eq 0 ]]; then
                print_warning "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
                WG_CONTAINERS=$(read_input "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é" "wireguard")
            else
                WG_CONTAINERS="${found_containers[*]}"
                print_success "–í—ã–±—Ä–∞–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $WG_CONTAINERS"
            fi
            ;;
            
        *)
            print_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
            exit 1
            ;;
    esac
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    local invalid_containers=()
    for container in $WG_CONTAINERS; do
        if ! docker inspect "$container" >/dev/null 2>&1; then
            invalid_containers+=("$container")
        fi
    done
    
    if [[ ${#invalid_containers[@]} -gt 0 ]]; then
        print_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: ${invalid_containers[*]}"
        exit 1
    fi
    
    print_success "–í—ã–±—Ä–∞–Ω—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $WG_CONTAINERS"
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
configure_advanced() {
    print_step "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    echo -e "${CYAN}–•–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥—Ö–æ–¥—è—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É)${NC}"
    local advanced
    advanced=$(read_input "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞? (y/N)" "N")
    
    if [[ "$advanced" =~ ^[Yy] ]]; then
        # WireGuard –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        echo -e "\n${CYAN}üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WireGuard:${NC}"
        WG_IFACE=$(read_input "–ò–º—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ WireGuard" "$WG_IFACE")
        
        # Threshold
        echo -e "\n${CYAN}‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è:${NC}"
        echo "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±–µ–∑ handshake –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç?"
        echo "‚Ä¢ 60 (1 –º–∏–Ω—É—Ç–∞) - –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ"
        echo "‚Ä¢ 300 (5 –º–∏–Ω—É—Ç) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
        echo "‚Ä¢ 600 (10 –º–∏–Ω—É—Ç) - –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        echo "‚Ä¢ 1800 (30 –º–∏–Ω—É—Ç) - –º—è–≥–∫–æ"
        THRESHOLD=$(read_input "–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö" "$THRESHOLD")
        
        # Log level
        echo -e "\n${CYAN}üìä –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:${NC}"
        echo "‚Ä¢ DEBUG - –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω–æ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"
        echo "‚Ä¢ INFO - –Ω–æ—Ä–º–∞–ª—å–Ω–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
        echo "‚Ä¢ WARN - —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"
        echo "‚Ä¢ ERROR - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏"
        LOG_LEVEL=$(read_input "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤" "$LOG_LEVEL")
        
        # Alert cooldown
        echo -e "\n${CYAN}üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤:${NC}"
        echo "–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ—Ç –∂–µ –∞–ª–µ—Ä—Ç?"
        echo "‚Ä¢ 300 (5 –º–∏–Ω—É—Ç) - —á–∞—Å—Ç–æ"
        echo "‚Ä¢ 1800 (30 –º–∏–Ω—É—Ç) - –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        echo "‚Ä¢ 3600 (1 —á–∞—Å) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
        echo "‚Ä¢ 7200 (2 —á–∞—Å–∞) - —Ä–µ–¥–∫–æ"
        ALERT_COOLDOWN=$(read_input "Cooldown –≤ —Å–µ–∫—É–Ω–¥–∞—Ö" "$ALERT_COOLDOWN")
        
        # Max retries
        echo -e "\n${CYAN}üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏:${NC}"
        MAX_RETRIES=$(read_input "–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram [1-10]" "$MAX_RETRIES")
    else
        print_info "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    fi
}

# –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
show_configuration_summary() {
    print_step "–ò—Ç–æ–≥–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    
    cat << EOF
${CYAN}üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WireGuard Monitor:${NC}

${YELLOW}Telegram:${NC}
‚Ä¢ –ë–æ—Ç —Ç–æ–∫–µ–Ω: ${BOT_TOKEN:0:20}...
‚Ä¢ Chat ID: $CHAT_ID

${YELLOW}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}  
‚Ä¢ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: $WG_CONTAINERS
‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $WG_IFACE
‚Ä¢ –ü–æ—Ä–æ–≥ handshake: $THRESHOLD —Å–µ–∫—É–Ω–¥ ($((THRESHOLD / 60)) –º–∏–Ω)

${YELLOW}–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:${NC}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: $LOG_LEVEL
‚Ä¢ Cooldown –∞–ª–µ—Ä—Ç–æ–≤: $ALERT_COOLDOWN —Å–µ–∫—É–Ω–¥ ($((ALERT_COOLDOWN / 60)) –º–∏–Ω)
‚Ä¢ –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: $MAX_RETRIES

${YELLOW}–§–∞–π–ª—ã:${NC}
‚Ä¢ –°–∫—Ä–∏–ø—Ç: $SCRIPT_PATH
‚Ä¢ –ö–æ–Ω—Ñ–∏–≥: $CONFIG_FILE
‚Ä¢ –õ–æ–≥–∏: $LOG_FILE

${YELLOW}–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:${NC}
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫: –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
‚Ä¢ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: –¥–∞ (systemd)

EOF

    local confirm
    confirm=$(read_input "–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? (Y/n)" "Y")
    
    if [[ ! "$confirm" =~ ^[Yy] ]]; then
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
create_config_file() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞..."
    
    cat > "$CONFIG_FILE" << EOF
# WireGuard Monitor Configuration
# –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: $(date)
# –•–æ—Å—Ç: $(hostname)

# =============================================================================
# TELEGRAM SETTINGS (Required)
# =============================================================================

# Telegram Bot Token
BOT_TOKEN="$BOT_TOKEN"

# Telegram Chat ID  
CHAT_ID="$CHAT_ID"

# =============================================================================
# CONTAINER SETTINGS (Required)
# =============================================================================

# WireGuard container names (space-separated for multiple)
WG_CONTAINERS="$WG_CONTAINERS"

# WireGuard interface name inside the container
WG_IFACE="$WG_IFACE"

# Handshake age threshold in seconds
THRESHOLD=$THRESHOLD

# =============================================================================
# MONITORING BEHAVIOR
# =============================================================================

# Logging level: DEBUG, INFO, WARN, ERROR
LOG_LEVEL="$LOG_LEVEL"

# Alert cooldown period in seconds
ALERT_COOLDOWN=$ALERT_COOLDOWN

# Maximum retry attempts for Telegram messages
MAX_RETRIES=$MAX_RETRIES

# =============================================================================
# ADVANCED SETTINGS (Optional)
# =============================================================================

# Custom log file path
# WG_MONITOR_LOG="/var/log/wg-monitor.log"

# Enable extended peer information in alerts
# EXTENDED_PEER_INFO="false"

# Custom message format for alerts  
# ALERT_FORMAT="üö® WireGuard Alert on {hostname}"

# Enable recovery notifications
RECOVERY_NOTIFICATION="true"

# Enable startup notification
STARTUP_NOTIFICATION="false"
EOF

    chmod 600 "$CONFIG_FILE"
    chown root:root "$CONFIG_FILE"
    
    print_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: $CONFIG_FILE"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∫—Ä–∏–ø—Ç–∞
download_files() {
    print_step "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ WireGuard Monitor..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    local temp_dir="/tmp/wg-monitor-install-$$"
    mkdir -p "$temp_dir"
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    local files=(
        "wg_telemon"
        "wg-telemon.service"
        "wg-telemon.timer"
        "README.md"
    )
    
    print_info "–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ GitHub..."
    
    for file in "${files[@]}"; do
        local url="https://raw.githubusercontent.com/Anton-Babaskin/Docker-WireGuard-Monitor/main/$file"
        print_info "–°–∫–∞—á–∏–≤–∞–µ–º $file..."
        
        if ! curl -fsSL "$url" -o "$temp_dir/$file"; then
            print_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å $file"
            rm -rf "$temp_dir"
            exit 1
        fi
    done
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤..."
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
    cp "$temp_dir/wg_telemon" "$SCRIPT_PATH"
    chmod +x "$SCRIPT_PATH"
    chown root:root "$SCRIPT_PATH"
    
    # Systemd —Ñ–∞–π–ª—ã
    cp "$temp_dir/wg-telemon.service" "$SERVICE_FILE"
    cp "$temp_dir/wg-telemon.timer" "$TIMER_FILE"
    chown root:root "$SERVICE_FILE" "$TIMER_FILE"
    
    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    mkdir -p "$INSTALL_DIR"
    cp "$temp_dir/README.md" "$INSTALL_DIR/" 2>/dev/null || true
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–∞
    touch "$LOG_FILE"
    chmod 644 "$LOG_FILE"
    chown root:root "$LOG_FILE"
    
    # Cleanup
    rm -rf "$temp_dir"
    
    print_success "–§–∞–π–ª—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd
setup_systemd() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞..."
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
    systemctl daemon-reload
    
    # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    systemctl enable wg-telemon.timer
    
    print_success "Systemd –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
final_test() {
    print_step "–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    if "$SCRIPT_PATH" --test; then
        print_success "–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω"
    else
        print_error "–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω"
        return 1
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
    print_info "–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    systemctl start wg-telemon.timer
    
    if systemctl is-active --quiet wg-telemon.timer; then
        print_success "–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        print_error "–°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
        systemctl status wg-telemon.timer --no-pager
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    print_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:"
    systemctl list-timers wg-telemon.timer --no-pager
    
    return 0
}

# –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
show_completion_info() {
    print_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    
    cat << EOF

${GREEN}‚úÖ WireGuard Monitor —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!${NC}

${CYAN}üìä –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å:${NC}
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã  
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Telegram –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

${CYAN}üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}

${YELLOW}–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞:${NC}
  sudo systemctl status wg-telemon.timer
  sudo systemctl status wg-telemon.service

${YELLOW}–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:${NC}
  sudo journalctl -u wg-telemon.service -f
  sudo tail -f $LOG_FILE

${YELLOW}–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º:${NC}
  sudo systemctl stop wg-telemon.timer    # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
  sudo systemctl start wg-telemon.timer   # –∑–∞–ø—É—Å—Ç–∏—Ç—å
  sudo systemctl restart wg-telemon.timer # –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å

${YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:${NC}
  sudo $SCRIPT_PATH --test           # —Ç–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  sudo $SCRIPT_PATH --health         # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
  sudo $SCRIPT_PATH --log-level DEBUG # –æ—Ç–ª–∞–¥–∫–∞

${YELLOW}–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:${NC}
  sudo nano $CONFIG_FILE
  # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å

${CYAN}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤:${NC}

–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∞–ª–µ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç:

1Ô∏è‚É£  –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${YELLOW}sudo docker stop wireguard${NC}
   –î–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ 2-4 –º–∏–Ω—É—Ç—ã

2Ô∏è‚É£  –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${YELLOW}sudo docker start wireguard${NC}

3Ô∏è‚É£  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏: ${YELLOW}sudo tail -f $LOG_FILE${NC}

${CYAN}üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:${NC}
‚Ä¢ GitHub: https://github.com/Anton-Babaskin/Docker-WireGuard-Monitor
‚Ä¢ Issues: https://github.com/Anton-Babaskin/Docker-WireGuard-Monitor/issues

${GREEN}–°—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞! üõ°Ô∏è‚ú®${NC}

EOF
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handle_error() {
    local line_number=$1
    print_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $line_number"
    
    cat << EOF

${RED}üí• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏${NC}

${YELLOW}–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:${NC}
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤—ã—à–µ
2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Å–Ω–æ–≤–∞
3. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –æ—Ç–∫—Ä–æ–π—Ç–µ issue –Ω–∞ GitHub

${YELLOW}–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:${NC}
  bash -x $0

${YELLOW}–õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:${NC}
  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –≤—ã—à–µ

EOF
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    cleanup_on_error
    
    exit 1
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
cleanup_on_error() {
    print_info "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    [[ -f "$CONFIG_FILE" ]] && rm -f "$CONFIG_FILE" 2>/dev/null || true
    [[ -f "$SCRIPT_PATH" ]] && rm -f "$SCRIPT_PATH" 2>/dev/null || true
    [[ -f "$SERVICE_FILE" ]] && rm -f "$SERVICE_FILE" 2>/dev/null || true
    [[ -f "$TIMER_FILE" ]] && rm -f "$TIMER_FILE" 2>/dev/null || true
    
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º systemd
    systemctl daemon-reload 2>/dev/null || true
}

# –§—É–Ω–∫—Ü–∏—è –¥–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏–∏
uninstall() {
    print_header
    print_step "–î–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏—è WireGuard Monitor"
    
    local confirm
    confirm=$(read_input "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å WireGuard Monitor? (y/N)" "N")
    
    if [[ ! "$confirm" =~ ^[Yy] ]]; then
        print_info "–î–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
    
    print_step "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    systemctl stop wg-telemon.timer 2>/dev/null || true
    systemctl disable wg-telemon.timer 2>/dev/null || true
    
    print_step "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."
    rm -f "$SCRIPT_PATH"
    rm -f "$SERVICE_FILE"  
    rm -f "$TIMER_FILE"
    
    systemctl daemon-reload
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    local remove_config
    remove_config=$(read_input "–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª $CONFIG_FILE? (y/N)" "N")
    if [[ "$remove_config" =~ ^[Yy] ]]; then
        rm -f "$CONFIG_FILE"
        print_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"
    fi
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ª–æ–≥–∞—Ö
    local remove_logs
    remove_logs=$(read_input "–£–¥–∞–ª–∏—Ç—å –ª–æ–≥ —Ñ–∞–π–ª $LOG_FILE? (y/N)" "N")
    if [[ "$remove_logs" =~ ^[Yy] ]]; then
        rm -f "$LOG_FILE"
        print_info "–õ–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã"
    fi
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [[ -d "$INSTALL_DIR" ]]; then
        local remove_dir
        remove_dir=$(read_input "–£–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $INSTALL_DIR? (y/N)" "N")
        if [[ "$remove_dir" =~ ^[Yy] ]]; then
            rm -rf "$INSTALL_DIR"
            print_info "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞"
        fi
    fi
    
    print_success "–î–µ–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    cat << EOF
${BLUE}WireGuard Monitor Interactive Installer v$SCRIPT_VERSION${NC}

${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}
  $0 [–û–ü–¶–ò–ò]

${YELLOW}–û–ø—Ü–∏–∏:${NC}
  --install, -i     –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  --uninstall, -u   –£–¥–∞–ª–∏—Ç—å WireGuard Monitor
  --help, -h        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --version, -v     –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏—é

${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}
  $0                # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
  $0 --install      # –¢–æ –∂–µ —Å–∞–º–æ–µ
  $0 --uninstall    # –£–¥–∞–ª–µ–Ω–∏–µ
  
${YELLOW}–û–ø–∏—Å–∞–Ω–∏–µ:${NC}
  –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç WireGuard Monitor
  —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. –û–Ω –ø–æ–º–æ–∂–µ—Ç:
  
  ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram –±–æ—Ç–∞
  ‚Ä¢ –ù–∞–π—Ç–∏ WireGuard –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
  ‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

${YELLOW}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:${NC}
  ‚Ä¢ Linux —Å systemd
  ‚Ä¢ Docker (–∑–∞–ø—É—â–µ–Ω–Ω—ã–π)
  ‚Ä¢ curl, bash 4.0+
  ‚Ä¢ –ü—Ä–∞–≤–∞ root (sudo)

${YELLOW}GitHub:${NC} https://github.com/Anton-Babaskin/Docker-WireGuard-Monitor

EOF
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main_install() {
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    trap 'handle_error $LINENO' ERR
    
    print_header
    
    print_step "–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É WireGuard Monitor"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_root
    check_system
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    configure_telegram
    detect_containers
    configure_advanced
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    show_configuration_summary
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞
    create_config_file
    download_files
    setup_systemd
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if final_test; then
        show_completion_info
    else
        print_error "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        print_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $CONFIG_FILE"
        print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: sudo $SCRIPT_PATH --test"
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --install|-i|"")
        main_install
        ;;
    --uninstall|-u)
        check_root
        uninstall
        ;;
    --help|-h)
        show_help
        exit 0
        ;;
    --version|-v)
        echo "$SCRIPT_NAME v$SCRIPT_VERSION"
        exit 0
        ;;
    *)
        print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
        echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac
